import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DummyComponent } from './dummy.component';
import {By} from '@angular/platform-browser';
import {HttpClientTestingModule} from '@angular/common/http/testing';
import {ReactiveFormsModule} from '@angular/forms';
import {UserService} from '../user.service';
import {Observable, of} from 'rxjs';

describe('DummyComponent', () => {
  let component: DummyComponent;
  let fixture: ComponentFixture<DummyComponent>;
  let fakeUserService: any;

  const beers = ['stella', 'goudale', 'kro']

  beforeEach(async () => {
    fakeUserService = jasmine.createSpyObj<UserService>('UserService', ['getAll']);
    fakeUserService.getAll.and.returnValue(of([
      {name: 'toto', age: 36},
      {name: 'ling', age: 31}
    ]))

    await TestBed.configureTestingModule({
      declarations: [ DummyComponent ],
      imports: [HttpClientTestingModule, ReactiveFormsModule],
     // providers: [ { provide: UserService, useClass: UserServiceMock}]
      providers: [ { provide: UserService, useValue: fakeUserService}]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(DummyComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  // LI in DOM
  it('should contain a ul with three li', () => {
    component.beers = beers;
    fixture.detectChanges()

    const lis = fixture.debugElement.queryAll(By.css('ul li'))
    expect(lis.length).toEqual(3)
    lis.forEach( b => {
     expect(b.attributes['name']).toEqual('goodbeer')
    })
  });

  // LI generated by test


  it('should check value submitted', () => {

    const input: HTMLInputElement = fixture.debugElement.query(By.css('input')).nativeElement
    input.value = 'Hellooo'

    input.dispatchEvent(new Event('input'))

    component['us'].getAll().subscribe(v =>  console.log(v));

    const button: HTMLInputElement = fixture.debugElement.query(By.css('button')).nativeElement
    button.click()

    expect(component.form.controls['name'].value).toEqual('Hellooo')

  });
});


//Mock Service Object
class UserServiceMock {
  getAll(): Observable<any> {
    return of([
      {name: 'toto', age: 36},
      {name: 'ling', age: 31}
    ]);
  }
}

